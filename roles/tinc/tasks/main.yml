---

- name: install epel-release (redhat)
  yum: >
    name=epel-release
    state=latest
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "7")

- name: install tinc
  package: >
    name=tinc
    state=latest
  become: true

- name: create tinc systemd service file (redhat)
  template: >
    src=tinc.service.j2
    dest=/etc/systemd/system/tinc.service
  register: tinc_service_file
  when: (ansible_os_family == "RedHat" and ansible_distribution_major_version == "7")
  become: true

- name: systemctl daemon-reload (redhat)
  shell: systemctl daemon-reload
  when: tinc_service_file.changed
  become: true

- name: ensure tinc netname directory exists
  file: >
    path=/etc/tinc/{{ vpn_netname }}/hosts
    recurse=True
    state=directory
  become: true

- name: create /etc/tinc/nets.boot file from template
  template: >
    src=nets.boot.j2
    dest=/etc/tinc/nets.boot
  notify:
    - restart tinc
  become: true

- name: ensure tinc.conf contains connection to all other nodes
  template: >
    src=tinc.conf.j2
    dest=/etc/tinc/{{ vpn_netname }}/tinc.conf
  notify:
    - reload tinc
  become: true

- name: create tinc-up file
  template: >
    src=tinc-up.j2
    dest=/etc/tinc/{{ vpn_netname }}/tinc-up
    mode=0755
  notify:
    - restart tinc
  become: true

- name: create tinc-down file
  template: >
    src=tinc-down.j2
    dest=/etc/tinc/{{ vpn_netname }}/tinc-down
    mode=0755
  notify:
    - restart tinc
  become: true

- name: ensure tinc hosts file binds to physical ip address
  lineinfile: >
    dest=/etc/tinc/{{ vpn_netname }}/hosts/{{ inventory_hostname }}
    line="Address = {{ physical_ip }}"
    regexp="Address = \d+.\d+.\d+.\d+"
    create=yes
  notify:
    - restart tinc
  become: true

- name: ensure subnet ip address is properly set in tinc host file
  lineinfile: >
    dest=/etc/tinc/{{ vpn_netname }}/hosts/{{ inventory_hostname }}
    line="Subnet = {{ vpn_ip }}/{{ vpn_subnet_cidr_netmask }}"
    create=yes
  notify:
    - restart tinc
  become: true

- name: check whether /etc/tinc/netname/hosts/inventory_hostname contains "-----END RSA PUBLIC KEY-----"
  command: awk '/^-----END RSA PUBLIC KEY-----$/'  /etc/tinc/{{ vpn_netname }}/hosts/{{ inventory_hostname }}
  changed_when: "public_key.stdout != '-----END RSA PUBLIC KEY-----'"
  register: public_key
  become: true

# this is necessary because the public key will not be generated (non-interactively) if the private key already exists
- name: delete private key and regenerate keypair if public key is absent from tinc hosts file
  file: >
    path=/etc/tinc/{{ vpn_netname }}/rsa_key.priv
    state=absent
  when: public_key.changed
  become: true

- name: create tinc private key (and append public key to tincd hosts file)
  shell: tincd -n {{ vpn_netname }} -K4096
  args:
    creates: /etc/tinc/{{ vpn_netname }}/rsa_key.priv
  notify:
    - restart tinc
  become: true

- name: fetch tinc hosts file after key creation
  fetch: >
    src=/etc/tinc/{{ vpn_netname }}/hosts/{{ inventory_hostname }}
    dest=fetch/{{ inventory_hostname }}
    flat=yes
  notify:
    - reload tinc
  become: true

- name: sync the fetched tinc hosts files on each host
  synchronize: >
    src=fetch/
    dest=/etc/tinc/{{ vpn_netname }}/hosts/
  notify:
    - reload tinc
  become: true

- name: run handlers
  meta: flush_handlers
  become: true

- name: ensure tinc is started
  service: >
    name=tinc
    enabled=yes
    state=started
    pattern=tincd -n {{ vpn_netname }}
  become: true

- name: add nodes to /etc/hosts (ansible_inventory resolves to vpn_ip)
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ hostvars[item].vpn_ip }} {{item}}" state=present
  when: hostvars[item].vpn_ip is defined
  with_items: "{{ play_hosts }}"
  become: true